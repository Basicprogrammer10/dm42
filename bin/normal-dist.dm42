// (1 + erf((x - mu) / sigma / sqrt(2))) / 2
export def cdf {
    0, STO "X", DROP
    0, STO "MU", DROP
    1, STO "SIGMA", DROP

    RCL "X"
    RCL "MU"
    -
    RCL "SIGMA"
    /
    2
    SQRT
    /
    erf
    1, +
    2, /
}

// sign = signum(x)
// x = abs(x)
// 
// a1 =  0.254829592
// a2 = -0.284496736
// a3 =  1.421413741
// a4 = -1.453152027
// a5 =  1.061405429
// p  =  0.3275911
// 
// t = 1.0/(1.0 + p*x)
// y = 1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1) * t * e^(-x^2)
// sign*y
def erf {
    // Take the absolute value of x
    // also save the sign of x for later
    DUP
    ABS
    STO 00 // |X| in 00
    DROP
    SIGN
    STO 01 // sign(X) in 01
    DROP

    // Calculate t
    0.3275911 // p
    RCL 00
    *
    1,+
    1/X
    STO 02 // t in 02
    DROP

    // Calculate y
    1
    1.061405429 // a5
    RCL 02, *
    -1.453152027 // a4
    +
    RCL 02, *
    1.421413741 // a3
    +
    RCL 02, *
    -0.284496736 // a2
    +
    RCL 02, *
    0.254829592 // a1
    +
    RCL 02, *

    // * e^(-x^2)
    RCL 00
    X↑2
    +/-
    E↑X
    *
    -

    // Return sign
    RCL 01
    *
}